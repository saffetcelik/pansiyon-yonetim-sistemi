import React, { useState, useEffect } from 'react';
import { reservationService, roomService } from '../services/api';
import '../styles/calendar.css';

const RoomCalendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [reservations, setReservations] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState('horizontal');

  useEffect(() => {
    loadData();
  }, [currentDate]);

  const loadData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const month = currentDate.getMonth() + 1;
      const year = currentDate.getFullYear();
      
      const [reservationsRes, roomsRes] = await Promise.all([
        reservationService.getCalendar(month, year),
        roomService.getAll()
      ]);
      
      console.log('Reservations:', reservationsRes.data);
      console.log('Rooms:', roomsRes.data);
      
      const sortedRooms = (roomsRes.data || []).sort((a, b) => {
        return parseInt(a.roomNumber) - parseInt(b.roomNumber);
      });

      setReservations(reservationsRes.data || []);
      setRooms(sortedRooms);
    } catch (error) {
      console.error('Error loading data:', error);
      setError('Veriler yÃ¼klenirken hata oluÅŸtu');
    } finally {
      setLoading(false);
    }
  };

  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    const days = [];
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(new Date(year, month, day));
    }
    
    return days;
  };

  const isRoomReserved = (roomNumber, date) => {
    const dateStr = date.toISOString().split('T')[0];
    return reservations.find(reservation => {
      const checkIn = new Date(reservation.checkInDate).toISOString().split('T')[0];
      const checkOut = new Date(reservation.checkOutDate).toISOString().split('T')[0];
      return reservation.roomNumber === roomNumber && dateStr >= checkIn && dateStr < checkOut;
    });
  };

  const getReservationStyle = (reservation) => {
    if (!reservation) return '';
    
    const colors = {
      0: 'bg-yellow-200 text-yellow-800', // Pending
      1: 'bg-blue-200 text-blue-800',     // Confirmed
      2: 'bg-green-200 text-green-800',   // Checked In
      3: 'bg-gray-200 text-gray-800',     // Checked Out
      4: 'bg-red-200 text-red-800',       // Cancelled
      5: 'bg-red-300 text-red-900',       // No Show
    };
    return colors[reservation.status] || 'bg-gray-200 text-gray-800';
  };

  const navigateMonth = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };

  const goToToday = () => {
    setCurrentDate(new Date());
  };

  const formatMonthYear = (date) => {
    return date.toLocaleDateString('tr-TR', { 
      year: 'numeric', 
      month: 'long' 
    });
  };

  const days = getDaysInMonth();

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  const renderReservationCell = (room, date) => {
    const reservation = isRoomReserved(room.roomNumber, date);
    return (
      <div
        className={`border-b border-r p-2 ${
          reservation
            ? `${getReservationStyle(reservation)} cursor-pointer`
            : 'hover:bg-gray-50'
        }`}
        title={
          reservation
            ? `${reservation.customerName}
Oda: ${reservation.roomNumber}
GiriÅŸ: ${new Date(reservation.checkInDate).toLocaleDateString('tr-TR')}
Ã‡Ä±kÄ±ÅŸ: ${new Date(reservation.checkOutDate).toLocaleDateString('tr-TR')}
Durum: ${
              reservation.status === 0 ? 'Beklemede' :
              reservation.status === 1 ? 'OnaylandÄ±' :
              reservation.status === 2 ? 'GiriÅŸ YapÄ±ldÄ±' :
              reservation.status === 3 ? 'Ã‡Ä±kÄ±ÅŸ YapÄ±ldÄ±' :
              reservation.status === 4 ? 'Ä°ptal Edildi' :
              reservation.status === 5 ? 'Gelmedi' : 'Bilinmiyor'
            }
Misafir SayÄ±sÄ±: ${reservation.numberOfGuests || 1}`
            : 'MÃ¼sait'
        }
      >
        {reservation && (
          <>
            <div className="text-xs font-medium truncate">
              {reservation.customerName}
            </div>
            <div className="text-xs truncate opacity-75">
              {reservation.numberOfGuests || 1} misafir
            </div>
          </>
        )}
      </div>
    );
  };

  const renderRoomInfo = (room) => (
    <div className="font-medium min-w-[150px]">
      <div className="font-medium">Oda {room.roomNumber}</div>
      <div className="text-xs text-gray-500">
        {room.roomType} Â· {room.capacity} kiÅŸilik
      </div>
      <div className="text-xs">
        <span className="font-medium text-green-600">
          {room.pricePerNight} â‚º
        </span>
        <span className="text-gray-500"> / gece</span>
      </div>
    </div>
  );

  return (
    <div className="bg-white shadow-lg rounded-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-indigo-700 px-6 py-4">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <h2 className="text-xl font-semibold text-white">Oda Takvimi</h2>
            <div className="flex items-center space-x-4 bg-white bg-opacity-20 rounded-lg p-2">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="viewMode"
                  value="horizontal"
                  checked={viewMode === 'horizontal'}
                  onChange={(e) => setViewMode(e.target.value)}
                  className="form-radio text-white border-white focus:ring-white"
                />
                <span className="text-white text-sm">Yatay GÃ¶rÃ¼nÃ¼m</span>
              </label>
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="viewMode"
                  value="vertical"
                  checked={viewMode === 'vertical'}
                  onChange={(e) => setViewMode(e.target.value)}
                  className="form-radio text-white border-white focus:ring-white"
                />
                <span className="text-white text-sm">Dikey GÃ¶rÃ¼nÃ¼m</span>
              </label>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => navigateMonth(-1)}
              className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-lg transition-all duration-200"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            
            <div className="text-white font-medium min-w-[200px] text-center">
              {formatMonthYear(currentDate)}
            </div>
            
            <button
              onClick={() => navigateMonth(1)}
              className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-lg transition-all duration-200"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
            
            <button
              onClick={goToToday}
              className="bg-white text-indigo-600 px-3 py-2 rounded-lg font-medium hover:bg-indigo-50 transition-colors ml-4"
            >
              BugÃ¼n
            </button>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-red-50 border-l-4 border-red-400 p-4 m-4">
          <div className="flex">
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      {/* Calendar Grid */}
      <div className="p-6 overflow-x-auto">
        <div className="min-w-max">
          {viewMode === 'horizontal' ? (
            // Yatay GÃ¶rÃ¼nÃ¼m (GÃ¼nler soldan saÄŸa, Odalar yukarÄ±dan aÅŸaÄŸÄ±ya)
            <div className="grid" style={{ gridTemplateColumns: 'minmax(150px, auto) repeat(' + days.length + ', minmax(40px, 1fr))' }}>
              {/* Header Row - Days */}
              <div className="sticky left-0 z-10 bg-white border-b font-medium p-2">
                Oda
              </div>
              {days.map((date, index) => (
                <div
                  key={index}
                  className={`text-center border-b p-2 ${
                    date.toDateString() === new Date().toDateString()
                      ? 'bg-blue-50 font-bold text-blue-600'
                      : ''
                  }`}
                >
                  {date.getDate()}
                </div>
              ))}

              {/* Room Rows */}
              {rooms.map((room) => (
                <React.Fragment key={room.id}>
                  <div className="sticky left-0 z-10 bg-white border-b border-r p-2">
                    {renderRoomInfo(room)}
                  </div>
                  {days.map((date, dateIndex) => (
                    <React.Fragment key={dateIndex}>
                      {renderReservationCell(room, date)}
                    </React.Fragment>
                  ))}
                </React.Fragment>
              ))}
            </div>
          ) : (
            // Dikey GÃ¶rÃ¼nÃ¼m (Odalar soldan saÄŸa, GÃ¼nler yukarÄ±dan aÅŸaÄŸÄ±ya)
            <div className="grid" style={{ gridTemplateColumns: `repeat(${rooms.length + 1}, minmax(150px, 1fr))` }}>
              {/* Header Row - Rooms */}
              <div className="sticky top-0 z-10 bg-white border-b font-medium p-2">
                Tarih
              </div>
              {rooms.map((room) => (
                <div key={room.id} className="sticky top-0 z-10 bg-white border-b border-r p-2">
                  {renderRoomInfo(room)}
                </div>
              ))}

              {/* Date Rows */}
              {days.map((date, dateIndex) => (
                <React.Fragment key={dateIndex}>
                  <div
                    className={`border-b border-r p-2 ${
                      date.toDateString() === new Date().toDateString()
                        ? 'bg-blue-50 font-bold text-blue-600'
                        : ''
                    }`}
                  >
                    {date.getDate()}
                  </div>
                  {rooms.map((room) => (
                    <React.Fragment key={room.id}>
                      {renderReservationCell(room, date)}
                    </React.Fragment>
                  ))}
                </React.Fragment>
              ))}
            </div>
          )}
        </div>
      </div>

      {/* Legend */}
      <div className="bg-gray-50 px-6 py-4 border-t">
        <div className="flex flex-wrap gap-4 text-xs">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-yellow-200 rounded mr-2"></div>
            <span>Beklemede</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-blue-200 rounded mr-2"></div>
            <span>OnaylandÄ±</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-200 rounded mr-2"></div>
            <span>GiriÅŸ YapÄ±ldÄ±</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-gray-200 rounded mr-2"></div>
            <span>Ã‡Ä±kÄ±ÅŸ YapÄ±ldÄ±</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-red-200 rounded mr-2"></div>
            <span>Ä°ptal/Gelmedi</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RoomCalendar;

const RoomCalendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [reservations, setReservations] = useState([]);
  const [rooms, setRooms] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [viewMode, setViewMode] = useState('horizontal'); // 'horizontal' veya 'vertical'

  useEffect(() => {
    loadData();
  }, [currentDate]);

  const loadData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const month = currentDate.getMonth() + 1;
      const year = currentDate.getFullYear();
      
      // Fetch both reservations and rooms in parallel
      const [reservationsRes, roomsRes] = await Promise.all([
        reservationService.getCalendar(month, year),
        roomService.getAll() // Get all rooms, regardless of availability
      ]);
      
      console.log('Reservations:', reservationsRes.data);
      console.log('Rooms:', roomsRes.data);
      
      const sortedRooms = (roomsRes.data || []).sort((a, b) => {
        // Ã–nce oda numarasÄ±na gÃ¶re sÄ±rala
        return parseInt(a.roomNumber) - parseInt(b.roomNumber);
      });

      setReservations(reservationsRes.data || []);
      setRooms(sortedRooms);
    } catch (error) {
      console.error('Error loading data:', error);
      setError('Veriler yÃ¼klenirken hata oluÅŸtu');
    } finally {
      setLoading(false);
    }
  };

  const getDaysInMonth = () => {
    const year = currentDate.getFullYear();
    const month = currentDate.getMonth();
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    
    const days = [];
    for (let day = 1; day <= daysInMonth; day++) {
      days.push(new Date(year, month, day));
    }
    
    return days;
  };

  const isRoomReserved = (roomNumber, date) => {
    const dateStr = date.toISOString().split('T')[0];
    return reservations.find(reservation => {
      const checkIn = new Date(reservation.checkInDate).toISOString().split('T')[0];
      const checkOut = new Date(reservation.checkOutDate).toISOString().split('T')[0];
      return reservation.roomNumber === roomNumber && dateStr >= checkIn && dateStr < checkOut;
    });
  };

  const getReservationStyle = (reservation) => {
    if (!reservation) return '';
    
    const colors = {
      0: 'bg-yellow-200 text-yellow-800', // Pending
      1: 'bg-blue-200 text-blue-800',     // Confirmed
      2: 'bg-green-200 text-green-800',   // Checked In
      3: 'bg-gray-200 text-gray-800',     // Checked Out
      4: 'bg-red-200 text-red-800',       // Cancelled
      5: 'bg-red-300 text-red-900',       // No Show
    };
    return colors[reservation.status] || 'bg-gray-200 text-gray-800';
  };

  const navigateMonth = (direction) => {
    const newDate = new Date(currentDate);
    newDate.setMonth(currentDate.getMonth() + direction);
    setCurrentDate(newDate);
  };

  const goToToday = () => {
    setCurrentDate(new Date());
  };

  const formatMonthYear = (date) => {
    return date.toLocaleDateString('tr-TR', { 
      year: 'numeric', 
      month: 'long' 
    });
  };

  const days = getDaysInMonth();

  if (loading) {
    return (
      <div className="flex justify-center items-center h-64">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="bg-white shadow-lg rounded-lg overflow-hidden">
      {/* Header */}
      <div className="bg-gradient-to-r from-indigo-600 to-indigo-700 px-6 py-4">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <h2 className="text-xl font-semibold text-white">Oda Takvimi</h2>
            <div className="flex items-center space-x-4 bg-white bg-opacity-20 rounded-lg p-2">
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="viewMode"
                  value="horizontal"
                  checked={viewMode === 'horizontal'}
                  onChange={(e) => setViewMode(e.target.value)}
                  className="form-radio text-white border-white focus:ring-white"
                />
                <span className="text-white text-sm">Yatay GÃ¶rÃ¼nÃ¼m</span>
              </label>
              <label className="flex items-center space-x-2 cursor-pointer">
                <input
                  type="radio"
                  name="viewMode"
                  value="vertical"
                  checked={viewMode === 'vertical'}
                  onChange={(e) => setViewMode(e.target.value)}
                  className="form-radio text-white border-white focus:ring-white"
                />
                <span className="text-white text-sm">Dikey GÃ¶rÃ¼nÃ¼m</span>
              </label>
            </div>
          </div>
          <div className="flex items-center space-x-2">
            <button
              onClick={() => navigateMonth(-1)}
              className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-lg transition-all duration-200"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            
            <div className="text-white font-medium min-w-[200px] text-center">
              {formatMonthYear(currentDate)}
            </div>
            
            <button
              onClick={() => navigateMonth(1)}
              className="bg-white bg-opacity-20 hover:bg-opacity-30 text-white p-2 rounded-lg transition-all duration-200"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
              </svg>
            </button>
            
            <button
              onClick={goToToday}
              className="bg-white text-indigo-600 px-3 py-2 rounded-lg font-medium hover:bg-indigo-50 transition-colors ml-4"
            >
              BugÃ¼n
            </button>
          </div>
        </div>
      </div>

      {error && (
        <div className="bg-red-50 border-l-4 border-red-400 p-4 m-4">
          <div className="flex">
            <div className="ml-3">
              <p className="text-sm text-red-700">{error}</p>
            </div>
          </div>
        </div>
      )}

      {/* Calendar Grid */}
      <div className="p-6 overflow-x-auto">
        <div className="min-w-max">
          {viewMode === 'horizontal' ? (
            // Yatay GÃ¶rÃ¼nÃ¼m (GÃ¼nler soldan saÄŸa, Odalar yukarÄ±dan aÅŸaÄŸÄ±ya)
            <div className="grid" style={{ gridTemplateColumns: 'minmax(150px, auto) repeat(' + days.length + ', minmax(40px, 1fr))' }}>
              {/* Header Row - Days */}
              <div className="sticky left-0 z-10 bg-white border-b font-medium p-2">
                Oda
              </div>
              {days.map((date, index) => (
                <div
                  key={index}
                  className={`text-center border-b p-2 ${
                    date.toDateString() === new Date().toDateString()
                      ? 'bg-blue-50 font-bold text-blue-600'
                      : ''
                  }`}
                >
                  {date.getDate()}
                </div>
              ))}

              {/* Room Rows */}
              {rooms.map((room) => (
                <React.Fragment key={room.id}>
                  <div className="sticky left-0 z-10 bg-white border-b border-r p-2 flex items-center justify-between min-w-[150px]">
                    <div>
                      <div className="font-medium">Oda {room.roomNumber}</div>
                      <div className="text-xs text-gray-500">
                        {room.roomType} Â· {room.capacity} kiÅŸilik
                      </div>
                    </div>
                    <div className="flex flex-col items-end text-xs">
                      <span className="font-medium text-green-600">
                        {room.pricePerNight} â‚º
                      </span>
                      <span className="text-gray-500">/ gece</span>
                    </div>
                  </div>
                  {days.map((date, dateIndex) => {
                    const reservation = isRoomReserved(room.roomNumber, date);
                    return (
                      <div
                        key={dateIndex}
                        className={`border-b border-r p-2 ${
                          reservation
                            ? `${getReservationStyle(reservation)} cursor-pointer`
                            : 'hover:bg-gray-50'
                        }`}
                        title={
                          reservation
                            ? `${reservation.customerName}
Oda: ${reservation.roomNumber}
GiriÅŸ: ${new Date(reservation.checkInDate).toLocaleDateString('tr-TR')}
Ã‡Ä±kÄ±ÅŸ: ${new Date(reservation.checkOutDate).toLocaleDateString('tr-TR')}
Durum: ${
  reservation.status === 0 ? 'Beklemede' :
  reservation.status === 1 ? 'OnaylandÄ±' :
  reservation.status === 2 ? 'GiriÅŸ YapÄ±ldÄ±' :
  reservation.status === 3 ? 'Ã‡Ä±kÄ±ÅŸ YapÄ±ldÄ±' :
  reservation.status === 4 ? 'Ä°ptal Edildi' :
  reservation.status === 5 ? 'Gelmedi' : 'Bilinmiyor'
}
Misafir SayÄ±sÄ±: ${reservation.numberOfGuests || 1}`
                            : 'MÃ¼sait'
                        }
                      >
                        {reservation && (
                          <>
                            <div className="text-xs font-medium truncate">
                              {reservation.customerName}
                            </div>
                            <div className="text-xs truncate opacity-75">
                              {reservation.numberOfGuests || 1} misafir
                            </div>
                          </>
                        )}
                      </div>
                    );
                  })}
                </React.Fragment>
              ))}
            </div>
          ) : (
            // Dikey GÃ¶rÃ¼nÃ¼m (Odalar soldan saÄŸa, GÃ¼nler yukarÄ±dan aÅŸaÄŸÄ±ya)
            <div className="grid" style={{ gridTemplateColumns: `repeat(${rooms.length + 1}, minmax(150px, 1fr))` }}>
              {/* Header Row - Rooms */}
              <div className="sticky top-0 z-10 bg-white border-b font-medium p-2">
                Tarih
              </div>
              {rooms.map((room) => (
                <div key={room.id} className="sticky top-0 z-10 bg-white border-b border-r p-2">
                  <div className="font-medium">Oda {room.roomNumber}</div>
                  <div className="text-xs text-gray-500">
                    {room.roomType} Â· {room.capacity} kiÅŸilik
                  </div>
                  <div className="text-xs mt-1">
                    <span className="font-medium text-green-600">
                      {room.pricePerNight} â‚º
                    </span>
                    <span className="text-gray-500"> / gece</span>
                  </div>
                </div>
              ))}

              {/* Date Rows */}
              {days.map((date, dateIndex) => (
                <React.Fragment key={dateIndex}>
                  <div
                    className={`border-b border-r p-2 ${
                      date.toDateString() === new Date().toDateString()
                        ? 'bg-blue-50 font-bold text-blue-600'
                        : ''
                    }`}
                  >
                    {date.getDate()}
                  </div>
                  {rooms.map((room) => {
                    const reservation = isRoomReserved(room.roomNumber, date);
                    return (
                      <div
                        key={room.id}
                        className={`border-b border-r p-2 ${
                          reservation
                            ? `${getReservationStyle(reservation)} cursor-pointer`
                            : 'hover:bg-gray-50'
                        }`}
                        title={
                          reservation
                            ? `${reservation.customerName}
Oda: ${reservation.roomNumber}
GiriÅŸ: ${new Date(reservation.checkInDate).toLocaleDateString('tr-TR')}
Ã‡Ä±kÄ±ÅŸ: ${new Date(reservation.checkOutDate).toLocaleDateString('tr-TR')}
Durum: ${
  reservation.status === 0 ? 'Beklemede' :
  reservation.status === 1 ? 'OnaylandÄ±' :
  reservation.status === 2 ? 'GiriÅŸ YapÄ±ldÄ±' :
  reservation.status === 3 ? 'Ã‡Ä±kÄ±ÅŸ YapÄ±ldÄ±' :
  reservation.status === 4 ? 'Ä°ptal Edildi' :
  reservation.status === 5 ? 'Gelmedi' : 'Bilinmiyor'
}
Misafir SayÄ±sÄ±: ${reservation.numberOfGuests || 1}`
                            : 'MÃ¼sait'
                        }
                      >
                        {reservation && (
                          <>
                            <div className="text-xs font-medium truncate">
                              {reservation.customerName}
                            </div>
                            <div className="text-xs truncate opacity-75">
                              {reservation.numberOfGuests || 1} misafir
                            </div>
                          </>
                        )}
                      </div>
                    );
                  })}
                </React.Fragment>
              ))}
            </div>
          )}
        </div>
          </div>
        </div>
      </div>

      {/* Legend */}
      <div className="bg-gray-50 px-6 py-4 border-t">
        <div className="flex flex-wrap gap-4 text-xs">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-yellow-200 rounded mr-2"></div>
            <span>Beklemede</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-blue-200 rounded mr-2"></div>
            <span>OnaylandÄ±</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-200 rounded mr-2"></div>
            <span>GiriÅŸ YapÄ±ldÄ±</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-gray-200 rounded mr-2"></div>
            <span>Ã‡Ä±kÄ±ÅŸ YapÄ±ldÄ±</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-red-200 rounded mr-2"></div>
            <span>Ä°ptal/Gelmedi</span>
          </div>
        </div>
      </div>
    </div>
  );
};

export default RoomCalendar;
